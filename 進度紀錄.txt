20130308~20130311

1.  加入Action Mode，建立contextual mode和menu
2.  進Action Mode時以overlay方式顯示contextual menu與content layout，設定windowActionModeOverlay屬性
    <item name="android:windowActionModeOverlay">true</item>

3.  界面OnTouchListener回調

    public interface OnTouchListener {
        /**
         * Called when a touch event is dispatched to a view. This allows listeners to
         * get a chance to respond before the target view.
         *
         * @param v The view the touch event has been dispatched to.
         * @param event The MotionEvent object containing full information about
         *        the event.
         * @return True if the listener has consumed the event, false otherwise.
         */
        boolean onTouch(View v, MotionEvent event);
    }

    根據回調MotionEvent抓取手指按壓位置，one click或long click時MotionEvent變化轉態如下
    ACTION_DOWN-->N次ACTION_MOVE-->ACTION_UP
    N次ACTION_MOVE若時間夠長就進入long click，若不夠長就放開就解釋one click


4.  預先在ids.xml裡配置好程式裡要使用的widget ID，程式中生成I_Tracker_Well_Plate_View實體時調用setId(R.id.id名稱)
<resources>
  <item type="id" name="ID_well_plate_view" />
</resources>

5.  contextual menu item的icon以xml定義state drawable

6.  管理Action mode的menu item狀態，ActionMode.Callback裡新增Update_Menu_Item_Enable更新item enable/disable



20130312
1.  mReentrance判斷是否task是全新的執行還是從back stack返回
2.  device_filter.xml
    <usb-device vendor-id="1046" product-id="20512" class="3" subclass="0" protocol="0"/>
3.  新增I_Tracker_Device.java類別，enumeration usb device
    VID和PID匹配則設定mDevice，class&subclass&protocol匹配則設定mInterface


20130313
1.  USB attach會經由SystemUI.apk帶出Intent啟動提示，使用者再選擇欲執行的app，因此若拿掉SystemUI.apk雖然可以移除下方navigation bar
    ，但也影響了自動攔截USB ATTACH ACTION，之後要想辦法殺掉SystemUI程序，然後跳出前再重新啟動SystemUI
2.  ActionMode.invalidate()即時更新選單，將它包成方法UpdateActionMenuItem()，onPrepareActionMode()加入更新MenuItem enable/disable
3.  將Re-enumeration調整至onResume()
4.  若進入ActionMode，然後再插上USB，假設SystemUI被關掉，此時將無法收到Activity(intent=USB_ATTACHED)，因此Menu Item將無法被刷新


20130314
1.  Launch Mode變更成single task，避免ACTION_MAIN和ACTION_USB_ATTACHED造出二個不同的instances
2.  資料結構轉換到java要注意C語言的DWORD size，編譯器會做word alignment，以及每欄primitive type資料endian排序(記憶體內存放順序)
3.  java所有資料都是有號數signed，要特別注意signed bit extension
4.  各道指令checksum
    HID_CMD_ITRACKER_SETTING  431
    HID_CMD_ITRACKER_START  426
5.  USB device-->USB interface-->USB endpoints，開啟device的連線


20130315
1.  ByteBuffer類別可以處理primitive data type成byte stream並且可以指定擺放endian
2.  新增setInterface()保持紀錄最新的狀態，enumeration過程結束或者Deviceoffline時需要調用此方法更新mDeviceConnection

20130316週六凌晨
1.  暫時改成Portrait模式
2.  定義Tag = "I_Tracker_Activity";
3.  更改CMD_T成command message和data 兩種buffer並且實例化CMD_T成全局,之後要重新架構通訊協議格式；加入write_out()成員方法
4.  指令傳輸測試HID_CMD_ITRACKER_SETTING、HID_CMD_ITRACKER_START、HID_CMD_ITRACKER_STOP
5.  HID_CMD_ITRACKER_SETTING搭載I_tracker_setting_type，sizof(I_tracker_setting_type)=4
struct I_tracker_setting_type {
  int Well_Plate_Mode;
};
6.  HID_CMD_ITRACKER_DATA傳送資料結構I_tracker_type，不管compiler設定struct memeory align是1、2、4、8，大小和排列都一樣
struct Well_Coord_t {
//  uint8_t Liquid_Count[Max_well_X][Max_well_Y];
  unsigned int Coord_X:5;
  unsigned int Coord_Y:5;
  unsigned int Coord_X_Count:4;
  unsigned int Coord_Y_Count:4;
};

struct I_tracker_type {
  int Is_Running;
  int coord_index;
  Well_Coord_t Valid_Coord_Buf[Max_Coord_Buf];
};

7.  CMD_T加入成員方法read_in()，read_in()取得InRequest然後執行request queue
UsbRequest request = getOutRequest()或getInRequest(); //取得一個request
request.setClientData(this);  //設定client data供request wait返回比對
request.queue(byte_buf, byte_buf.limit());  //將byte_buf排入queue
request = mDeviceConnection.requestWait();  //返回最新dequeue request

8.  mTimer = new Timer();這行調整至onCreate()裡，Menu Item上Start和Stop就控制Timer開始與關閉

9.   press Menu item ID_MI_start_itracker，send HID_CMD_ITRACKER_SETTING、HID_CMD_ITRACKER_START命令給裝置


20130317
1.  Menu item function detail description
(1)  ID_MI_start_itracker: start the current task, if no any task is running, app start a whole new task
(2)  ID_MI_pause_itracker: pause the current running task but keep it all states & records, infons 
(3)  ID_MI_stop_itracker: ending the current task, all states & records, infos associated the current running
 task will discarded
(4)  ID_MI_previous_trans: go backward to cancel the recognized coordinates, only can cancel the unwanted 
coordinates from last recognized coordinates, currently not support cancel coordinates at any specify
position
(5)  ID_MI_next_trans

2.  USB attach後由System UI發現有符合的app可啟動，若回答是之後app內Enumeration()的finddevice和findinterface, opendevice都會成功
最後成功建立連線；若回答否，則re-enumeration只能找到device和interface，但opendevice建立連線會失敗，這是因為re-enumeration完成後必須
明確向係統提出連線請求，參照以下說明
Obtaining permission to communicate with a device
http://developer.android.com/guide/topics/connectivity/usb/host.html

3.  Enumeration執行時機，onCreate()執行一次，程式一旦運行中，會遇到user拔除USB，然後再重插USB時須要re-enumeration
(1)  程式運行中按home切到其它地方再按app反回，程式會繞經onNewIntent(action.MAIN)，無須再Enumeration
(2)  程式運行中拔插USB，程式會繞經onNewIntent(action.USB_DEVICE_ATTACHED)，此時須要re-enumeration
(3)  不放在onStart()或onResume()，因為會使得USB狀態掌控混亂

4.  UI thread處理發送HID_CMD_ITRACKER_SETTING、HID_CMD_ITRACKER_START、HID_CMD_ITRACKER_STOP；timer thread負責固定時間向device請求
發送HID_CMD_ITRACKER_DATA；小心處理資料同步存取問題，Itracker_IOCTL()加上synchronized，確保

5.  HID_CMD_ITRACKER_DATA收到解析，Valid_Coord_Histogram[][]記錄每個合法座標次數，Valid_Coord_Buf_Seq[]記錄這些座標順序
Valid_Coord_Histogram用來當作每個孔的color和brush style索引
Valid_Coord_Seq_Index記錄目前Valid_Coord_Buf_Seq[]下一個存放索引
Valid_Coord_Back_For記錄ID_MI_previous_trans和ID_MI_next_trans操作動作


20130318
1.  I_Tracker_Well_Plate新增2隻畫筆，一隻筆刷一隻細筆，筆刷會將封閉區填滿，細筆只畫輪廓邊
2.  筆刷的顏色根據該well被滴的次數查表獲得，建立顏色表Mark_Color_Table[]
3.  Well_Color_index[][]直接拷備Valid_Coord_Histogram[][]內容

20130320
1.  從API level HC版(3.0)起，systemUI做了很重大變革，係統會根據螢幕解析決定是phone還是tablet，若是phone則下方那條bar稱做status bar和navigation bar
若是tablet，則稱作system bar
2.  當activity進入onStart()時，此時引藏system bar；當activity被推入back stack，從新再顯示system bar，system bar隱藏前先取得當前桌面
，再度顯示system bar時重新顯示桌面
3.  現在有兩個頁面，一個是R.layout.radiogroup_well_selection，另一個是Well_View
setContentView(R.layout.radiogroup_well_selection)切至孔盤選擇頁面
setContentView(Well_View)切至well plate主頁
4.  新增Alert dialog提示是否返回well plate selection畫面


20130322
1.  timer thread執行週期450ms調整至300ms
2.  定義一些Toast message

20130325
1.  ID_MI_previous_trans和ID_MI_next_trans順暢度不佳是否因使用synchronized過度造成
2.  synchronized保護地方要謹慎避免讓係統運行不順暢
3.  最新當前focus座標，以blink effect顯示
4.  I_Tracker_Well_Plate_View改成繼承自ImageView
5.  Timer thread執行以下這行
UI_invalid = mItracker_dev.Process_Itracker_Data();
更動到之變量：Valid_Coord_Buf、Valid_Coord_Seq_Index、Valid_Coord_Back_For、Valid_Coord_Buf_Seq、Forwardable、Backwardable、Valid_Coord_Histogram

6.  UI thread執行ID_MI_previous_trans和ID_MI_next_trans選項
更動到之變量：Valid_Coord_Seq_Index、Valid_Coord_Back_For、Valid_Coord_Buf_Seq

實際上使用者不可能一邊滴一邊進行退回前一個或往後一個，所以無須以synchronized保護

7.  I_Tracker_Well_Plate_View.setWellColor(a[24][16]==Valid_Coord_Histogram[24][16])裡比對目前最新well color與well histogram，我們用histogram來表示
well color，當兩者不一樣時則立即更該well，無須整個畫面重新調用各種draw方法，以提升效率，只更新須更新的地方


20130326
1.  Canvas畫布提供許多drawXXX()方法，bitmap用來存放Canvas畫出來的pixel，操作Canvas時所有繪圖畫至bitmap上，View類框架每次調用onDraw(Canvas)會給我們一個
Canvas物件，我們在這Canvas畫想要畫的東西，所以有很多固定不變的draw call每次進到onDaraw()都要從新調用效能會很慢，因此我們創建一塊新畫布和新bitmap，然後在這塊
客制的畫布上畫我們想畫的區域，以減少draw call次數，再Canvas.drawBitmap()將我們的bitmap烤備至onDraw給的畫布上

2.  mMaxTouchablePosY改至初使化及setWell()改變孔盤設定後只算一遍
3.  修改setWellColor(a[][])，只re-draw須變動的well，新增Invalidate_Single_Well()更新該well的bitmap區域


20130327
1.  I_Tracker_Well_Plate.set_focus_coord()設置當前最後滴取的位置，然後每秒鐘blinking一次該位置

20131208
1.  timer thread理task queue原本由timerTaskStart()和timerTaskPause()控制enqueue及dequeue，重新改寫成一般worker thread
2.  建立iTracker_polling_thread，TheDelegatedPollingTask與原本TheDelegatedTimerTask一樣，指定它成iTracker_polling_thread要執行的內容
3.  Itracker_device.Itracker_IOCTL會被UI和worker thread競爭存取，因此必須用synchronized保證同一時間只有一個thread可執行該方法，我們把原本lock class範圍縮小成lock block
4.  I_Tracker_Well_Plate_View.decrese_SingleWellColor(...)及I_Tracker_Well_Plate_View.increase_SingleWellColor(...)操作Undo與Redo更有效率更新well plate view上color count index

20131209
1.  測試昨天新增的修正，worker thread每個回合加入適當延遲

20131211
1.  worker thread裡存在與UI thread資料衝突，變量UI_valid產生競爭危險，把worker thread的UI_invalid修改成UI_invalid_pipetting
按下undo事件，這段事件代碼由UI thread執行
case R.id.ID_MI_previous_trans:
  UI_invalid = mItracker_dev.go_backward();
......
  if (UI_invalid == 1) {
  }


以下代碼worker thread一直無窮迴圈執行
Runnable iTracker_DataRefreshTask = new Runnable() {
  public void run() {
    // TODO Auto-generated method stub
    while (AllowRefresh_iTrackerData) {
      mItracker_dev.Itracker_IOCTL(I_Tracker_Device.CMD_T.HID_CMD_ITRACKER_DATA, 0);
      UI_invalid = mItracker_dev.Process_Itracker_Data();

      if (UI_invalid != 0) {
      }
    }
  }
}

再仔細分析I_Tacker_Activity.java成員go_backward()由UI thread調用但Itracker_IOCTL(...)、Process_Itracker_Data()由worker thread調用，這三個成員方法產生同步race condition情況是不太可能的
，原因在於不可能同時操作redo、undo、pipetting，因此無須加一些同步lock

20131216
1.  修正I_Tracker_Device.Process_Itracker_Data()，row-base multi-pipetting log輸出剛好一行，col-base multi-pipetting則被拆成多行輸出，必須併成一行log
2.  實現選單click功能I_Tacker_Activity.onMenuItemClicked(...)
3.  demo發現新bug，純單爪測試undo/redo都沒問題，單爪和多爪混合使用再操作undo/redo會發生錯誤，多爪單純橫向或多爪單純縱向使用不會有問題，多爪橫向和縱向使用會出問題。原因在於I_Tracke_Device.go_backward()及I_Tracke_Device.go_forward()
裡並未更新解析最新的Coord_X_Count及Coord_Y_Count

20131217
1.  按下Run後關閉menudrawer，toast message for flush log file
2.  well裡顯示目前偵測到的次數，384 well圓圈圈拿掉
3.  修正I_Tacker_Activity.update_item_state()，如果菜單無須更新則直接返回，提高程式執行效能，初次修改請再多測試是否有問題
4.  修正mGifRun.java裡Thread Runnable，mSurfaceHolder.lockCanvas(...)之後必須調用mSurfaceHolder.unlockCanvasAndPost(rCanvas)釋放畫布，不然會有一些奇怪的exception產生

20131218
1.  iTracker處於Running時，host不斷會向device請求資料，此任務由worker thread負責不斷向device作polling，不預期插拔斷線造成廣播器接收到USB斷線，須要注意以下2行次序
最好先停掉worker thread，避免worker thread繼續操作USB連線，而連線的相關物件已經被回收了
						Stop_Refresh_iTracker_Data_Thread();
						mItracker_dev.DeviceOffline();
2.  加入app widget，點擊此widget以啟動iTacker activity app，滿足客戶要求icon大一些的須求

20131219
1.  加入客戶的hyperlink appwidget，尚未補上logo或icon，appwidget的layout上ImageButton背景state drawable於正常enable state時以透明呈現
2.  紫色太暗，因此當顯示次數大於6時以白色顯示數字
3.  menudrawer item的icon高度從32增加到36
4.  I_Tacker_Activity關掉intent-filter ACTION.MAIN
5.  屏敝掉onLongClick
6.  iTracker_DataRefreshTask()於UI_invalid_pipetting == 1時不須加delay，提高顯示反應速度

20131224
1.  worker Thread創造出來，預設priority會繼承自UI thread priority，必須將執行優先調到background priority，否則會與UI thread競爭，易造成UI thread被堵塞而發生ANR(android not respond)
2.  從2013/4/8初版demo，I_Tracker_Device裡就存在一個不明顯bug，mOutRequestPool與mInRequestPool用來維持住目前連線傳送USB所須的request IN或OUT ACK實例，這些request會與最新連線USB相關操作物件實例有關
    request.initialize(mDeviceConnection, mEndpointOut);  //這行代碼告訴我們USB每個IN或OUT request與當下最新連線的mDeviceConnection及mEndpointOut實例有關
    
            因此當我們USB發生斷線時，從新連線時不可以用上一次連線遺留在pool裡的IN 和 OUT ACK request實例，先前app還沒很大時，可能插拔很多次才會顯現此問題；隨著我們app資源消耗大，很快地插拔一次就發生問題
//device DETACHED 
	public void DeviceOffline() {
		setInterface(null, null);
		mOutRequestPool.clear();  //清空所有本次USB connection的OUT request
		mInRequestPool.clear();  //清空所有本次USB connection的IN request
	}

20131227
1.  status indicator更新thread改成由ThreadPoolExecutor類實現，更加有效率重覆執行thread，我們不用去管context資源回收利用
2.  iTrack device data pooling thread改成由ThreadPoolExecutor類實現
3.  getOutRequest(...)和getInRequest(...)每個request都要重新做endpoint與connection確認，目地是為了更能補捉到usb不預期拔除或斷線
    request.initialize(mDeviceConnection, mEndpointIn)

20140127
新增doc資料夾，存放客戶反饋意見及需求經會後討論列表等文件

20140129
1.  I_Tracker_Well_Plate_View類新增screen_width_pixel()和screen_height_pixel()方法回傳螢幕顯示資訊
2.  2014/01月新進一台RockChip平板，root super user無法使用，/system/xbin/su須更換成可以用的
//不知為何新平板os版本4.2.2內附su無法正常使用，只好放上舊平板版本os 4.0.3的su
root@android:/ # mount -o rw,remount -t ext4 /dev/block/mtdblock8 /system
c:\...\adb -s 0EK7I2V7FP push su /system/xbin/su-new
root@android:/ # chmod 06755 /system/xbin/su-new
3.  JELLY_BEAN_MR1後調用getRealMetrics(...)來取得display metrics好處解析度點數就是真正的，無需再考慮system bar有無隱藏了
    	metrics = new DisplayMetrics();
    	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    		((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRealMetrics(metrics);
    	}
    	else {
    		((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getMetrics((metrics));
    	}
4.  繪製實物長度牽涉到mm換算成pixel數，舊的那台densityDpi=120，換算短邊長度應為12.7cm但卻只有12.1cm，表示densityDpi不夠精確，乘上修正系數(12.7/12.1)就會得到正確pixels；2014/1月新RockChip平板到貨，它的densityDpi=160，解析度
1024x768，長邊長度16.256cm，短邊長度12.192cm，長邊與短邊與實際量測到是一樣的，故修正系數為1
	public int convert_mm2pixel(double value) {
		return (int) (value * metrics.densityDpi * (1.0f/25.4f) * (12.7 / 12.1));
	}

20140207~20140303
1.  Preference Dialog，客制化dialog，dialog的UI框架語activity很相似，最上層由PhoneWindow及DecorView組成，偵測模式選擇single、8、12、auto，用spinner(combobox)下拉選單選擇，敏感度調整以seekbar供拖曳調整
	/ * preference dialog & it's layout*/
	public Dialog preference_dialog;
	LinearLayout preference_dialog_layout;

2.  Preference Dialog項目初始化成上次關閉終值XXX，使用者調整變更設定，即時變更設定值會存放在Cur_XXX，待按下"Ok"扭把Cur_XXX回存至XXX，"Cancel"則放棄變更
    /*20140303 added by michael
	 * current pipetting detection mode selection*/
	int Pipetting_Mode = -1, Cur_Pipetting_Mode;
	boolean Adjust_Detection_Sensitivity = false, Cur_Adjust_Detection_Sensitivity;
	int Pipetting_Sensitivity_Level = -1, Cur_Detection_Sensitivity_Level;
	
20140304~20140312
1.  Preference Dialog加上seekbar數據顯示，按下"ok"後若iTrack device此時是停止的，直接對iTrack device送出HID_CMD_ITRACKER_SETTING命令；若此時iTrack運行中則送HID_CMD_ITRACKER_STOP再呼叫Connect_Itracker()

20140328
1.  客戶給的更高解析度logo圖檔orange_only_square1.png，測試後仍然有鋸齒狀
2.  Preference Dialog加上RelativeLayout把CheckBox、TextView分別對齊齊至列的左或右

20140519~20140612
1.  /mnt/sdcard/寫入權限問題，在AndroidManifest.xml加入以下修正
    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

2.  人因科技平板充電與USB孔共用，開孔位置在另一測短邊，調整AndroidManifest.xml的activity屬性screenOrientation，從"reversePortrait"改為"portrait"
3.  2014/1買的rockchip調用usb host api發生讀入時無限block無法返回，不管調用方式是使用asynchronized或synchronize，一樣都會發生block。I_Tracker_Device.java成員函式進行一些修改，依舊無法解決read in block現象，最終解決方式是修改
USB class從原本HID class調成vendor-specific，HID只支持EP_INT及EP_CONTROL兩種Endpoint type，vendor-specific class則可以支持EP_bulk，device端FW須修改一些USB的descriptor，app端修改device_filter.xml

private boolean send_request(UsbRequest request, ByteBuffer byte_buf) {
                boolean queue_result; 
	    	queue_result = request.queue(byte_buf, byte_buf.limit());  //多了檢查排入usb queue是否成功
	    	if (queue_result==true) {
                }
......
}
private boolean write_out(ByteBuffer byte_buf, int length) {
}
private boolean read_in(ByteBuffer byte_buf, int length) {
  byte_count = mDeviceConnection.bulkTransfer(mEndpointIn, read_buf, length, 0); //改成調用同步usb傳輸
}
4.  原本surfaceView上的icon顯示/不顯示表示USB有無連線，是否會撥放動畫表示app是否處於running狀態。拆成running_status_v與connection_status_v分別顯示
ImageView running_status_v, connection_status_v;
5.  每次拔插後app處於停止使用者必須重新按下"Run"才能繼續執行，或者app檢查mItrackerState記錄恢復斷線前狀態。當app和device連線並且運行時，突然拔除usb cable，引發斷線事件，此時device實際是運作狀態，因此app裡記錄device的狀態變量
mItrackerState於ACTION_USB_DEVICE_DETACHED回調的broadcastreceiver裡不變更連線狀態，下回重新連上usb cable，intent-filter action=ACTION_USB_DEVICE_ATTACHED，判斷mItrackerState可偵測到是拔除再重新插上。
6.  USB斷線畫面alpha值0.5，USB連線後且app處於停止時alpha值0.75，USB連線後且app處於運行則alpha值1；調用Well_View.setalpha(double=0~1.0f)，double=0.0f表示全透明，double=1.0f表示不透明
7.  裝置端struct I_tracker_type縮小Max_Coord_Buf數值，從100改成10，sizeof(I_tracker_type)=4+4+4*Max_Coord_Buf+4+4=4*4+4*10=56，只須one page(256 bytes)傳輸；原本sizeof(I_tracker_type)=408，須要two page(512 byte)傳輸
struct I_tracker_type {
  int Is_Running;
  int coord_index;
  Well_Coord_t Valid_Coord_Buf[Max_Coord_Buf];
/*20131103 added by michael
notify host if the Valid_Coord_Buf locked*/
  int buffer_locked;
  Well_Coord_t Newest_Valid_Coord;
};

20140616 送樣demo
1.  已知12爪偵測還有些尚未解決的問題
2.  I_Tracker_Well_Plate_View.java修改很多
(1)  double Viewable_height, Viewable_width;  //UI可視操作區長和寬(mm)
(2)  margin_x、margin_y、radius_pixels存放點數改成float
(3)  text size是以對角線衡量，因此字體的x寬和y高須除以根號2，如此計算label間拒才正確，label就會對齊circle中心
		label_width = Label_cxChar / Math.pow(2, 0.5);  
		label_height = Label_cyChar / Math.pow(2, 0.5);
(4)  mwell_pitch_x與mwell_pitch_y先前分別是9.x與7.x，這是不合理的，因為平板長和寬的dpi是一樣的，兩者應該是相等的，現在間距計算公式都調整精確，兩者數值是一樣的，視情形可做相近微調

20140624
1.  隱藏Navigation bar後，時常無法再度顯現；show_system_bar()和hide_system_bar()調用下達shell命令後delay一段時間讓命令完全徹底執行完畢，如此就不會有問題
2.  備份wallpaper須於隱藏Navigation bar之前完成，程式結束前回存桌面圖示
3.  客戶端url網址變更成  http://www.smartlabbench.com/
4.  客戶圓形logo調整至適當解析放至桌面顯示才不會有鋸齒狀

20140721
思考軟體版本更新問題
1.  APP的執行相當依賴於android framework版本，新APP若有訪問到新android framework，在舊有的android版本則無法順利被執行
(1)  訪問新API或者新成員變量，AndroidManifest.xml下minSdkVersion更正成可編譯之最小版本；也就是只要呼叫新API
(2)  調用新常數或新靜態成員變量則編譯時期會出現警告訊息，使用者須自行加上以執行時期版本檢查
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
}
else {
}
2.  平板、硬體版號、軟體版號(含OEM版號)，intra & inter dependency
3.  每換新一批新平板，螢幕border大小及顯示位置調整後以一組參數寫入preference file，後續維修換平板，新平板機構調整完成再寄送給客戶
4.  auto update目地就是客戶不用知道它的硬體裝置細節，自動搜找合適版本安裝
(1)  由工廠模式設定HW rev，FW根據HW rev執行正確配置
(2)  app則是只要一使用到新framework API則產生一個分支

20140730
新增繼承類InternalHandler

20140731~20140812
1.  實現app讀取firmware header，使用者有可能拿同一台平板接不同套i-track裝置，因此i-track裝置連線及斷線時即時更新裝置資訊
2.  為了每次傳送page size = 256 bytes，修改I_Tracker_Device.Itracker_IOCTL(...)參數
I_Tracker_Device方法  public boolean Itracker_IOCTL(int itracker_cmd, int debug) 傳入參數修正成
public boolean Itracker_IOCTL(int itracker_cmd, int arg0, int arg1, byte[] databyte, int debug)
3.  device端128k flash重新配置，為了實現自動更新功能，將128k切成兩塊64k，一塊APROM另一塊data flash；LDROM須重新改寫，device從LDROM開機，比對data flash與APROM兩者的firmware header，決策是否將data flash同步刷新至APROM裡；
app執行更新將最新的firmware傳送至device，先刷至data flash，然後重啟裝置從LDROM執行將data flash同步至APROM
4.  I_Tracker_Device類新增HID_CMD_ITRACKER_FW_HEADER及HID_CMD_ITRACKER_FW_UPGRADE兩個命令
(1)  HID_CMD_ITRACKER_FW_HEADER：從device端讀出data flash裡firmware header
(2)  HID_CMD_ITRACKER_FW_UPGRADE：對device端data flash進行更新，bin區先更新，firmware header最後更新，如此可以避免中途意外造成corrupt
5.  考量未來有可能大變動MCU腳位功能配置，為了能全部共用同一個firmware，firmware header硬體板本指示裝置執行那一組硬體配置，硬體配置出廠時就固定了，升級firmware不會被變更
6.  i-track裝置端firmware與server端firmware版本比對規則
(1)  MD5 check sum不一樣表示兩者有差異
(2)  Version_Code及Version_Name比對 ，Version_Name組成格式Major.Minor.Release_Date
7.  i-track app AndroidManifest.xml版本資訊versionCode及versionName，versionName組成格式Major.Minor.Release_Date，調用android installer安裝*.apk，同一app若已經安裝，installer進行min SDK、安全憑證比對、versionCode三項檢查
，通過這些檢查後才會進行升級安裝，發行新版時的versionCode須大於等於舊版versionCode。
versionCode  1 --- 2 --- 3 --- 4 --- 5 --- 6
versionName 1.0.x---------------------------
versionName                  2.0.x----------

8.  app升級firmware及app本身，使用者按下"About"選項，似服器上找iTrack_md5_list_app_ver_<major>.txt，其中<major>為AndroidManifest.xml裡取得，iTrack_md5_list_app_ver_<major>.txt記錄最新版本app及firmware的md5 checksum，若
md5 checksum不同則視為"out-of-date"，此時允許使用者按下對話盒上的"Upgrade"進行下載更新檔，各檔名
(1)  iTrack_md5_list_app_ver_<app versionName major>.txt
(2)  ads7953.bin、ads7953.release、ads7953.image，請用工具將keil C編譯後可執行檔*.bin做封裝產生*.image及*.release；*.image大小為64k
*.image == ^*.bin & .... & <firmware header>^
*.release == ^<firmware header> & *.bin
(3)  ItrackerDemo-20131125-google-repo_app_ver_<app versionName major>.apk

20140815
待結案處理，i-track device firmware巨量升級次數測試，以及還未更新完畢前不允許"About"視窗被取消消失
about_dialog.setCancelable(false);  //當按下Upgrade，屏蔽掉取消dialog

20140819
1.  AndroidManifest.xml指定每個Activity的screenOrientation參數目前為portrait及reversePortrait切換，程式裡調用setRequestedOrientation(int)及 getRequestedOrientation()來取得或變更方位
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT)
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)
2.  LogFileChooserActivity的Activity screenOrientation由上一層Activity決定，startActivity前以參數方式Extra bundle傳入

20140820~20140827
1.  加入上半區域及下半區域螢幕調整工具，將結果輸出至檔案iTrack_app_property，公用區路徑一定要由系統呼叫取得，因為每一台都有可能公用區路徑不同
2.  上半區域調整參數：portrait/reverse portrait、用尺測量到的螢幕短邊長度(screen width)、上半部可視區寬度(Viewable_width)、下半部可視區寬度(Viewable_height)
3.  下半區域調整參數：調整X方向及Y方向的well pitch、調整整個View的X方向及Y方向offset
4.  I_Tacker_Activity.java加入成員變量app_properties，app_properties把存在公用區路徑上的配置設定讀進來並套用
5.  每新進一款不同型號，除了app framework版本視情況是否發新版外，用此工具程式產生此台平版所須的最佳layout參數

20140827~20140831
1.  row/col sensor or led failure detection
2.  20140815待處理，其中巨量升級次數測試已結案；還未更新完畢前不允許"About"視窗被取消消失尚未處理
3.  I_Tracker_Well_Plate_View.java此次配合新增utility及增加標示sensor/led failure，修改幅度較大

20140916
1.  app加上簽章，保證是官方發表，依照以下(1)產生my-release-key.keystore，(2)及(3)產生signed_aligned.apk；或者直接用(1)(4)
(1)  生成my-release-key.keystore
c:\keytool\keytool -genkey -v -alias knight2001 -keystore my-release-key.keystore -keyalg RSA -keysize 2048 -validity 10000

(2)  從eclipse匯出尚未簽屬簽章的*.apk，"Android Tools"-->"Export unsigned Application package"
c:\keytool\jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -signedjar <output_signed.apk> <input_unsigned.apk> knight2001

(3)  將signed apk進行word alignment
c:\keytool\zipalign -v 4 <signed_unalign.apk> <signed_aligned.apk>

(4)  從eclipse匯出以my-release-key.keystore簽屬簽章的*.apk
2.  訪問wifi狀態，調用getSystemService(Context.WIFI_SERVICE)取得wifi manager實例，AndroidManifest.xml裡use-permission與wifi操作相關的權限也要開啟，以turn_on_wifi()與turn_off_wifi()開關wifi
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
3.  AndroidManifest.xml其餘與網路相關的權限宣告如下
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/>
    
4.  app package是由activities、services、broadcast receivers三種元件構成，AndroidManifest.xml宣告的元件是可以被系統看見，宣告屬性enabled="true" or "false"決定是否屏蔽此元件，當應用程式元件被屏蔽時，該元件設置的intent-filter是不起任何作用的
5.  實作ConnectivityReceiver，用來監測網路連線發生變化，監看intent-filter ConnectivityManager.CONNECTIVITY_ACTION
ConnectivityManager.CONNECTIVITY_ACTION = "android.net.conn.CONNECTIVITY_CHANGE"
6.  ConnectivityManager、NetworkInfo、WifiInfo、WifiManager、WifiConfiguration類別之引用
(1)  網路連線管理器 v.s. wifi管理器
ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
WifiManager wm = (WifiManager)getSystemService(Context.WIFI_SERVICE);
(2)  wifi管理器成員函：isWifiEnabled()、disconnect()、setWifiEnabled(false)、reassociate()
(3)  開啟wifi連線，從associated access point list中依照priority嘗試取得可用之網路連線		
		wm.setWifiEnabled(true);
		wm.reassociate();
(4)  關閉wifi連線
		wm.disconnect();
		wm.setWifiEnabled(false);
(5)  取得當前wifi 連線AP資訊WifiInfo類別
        WifiInfo wifi_info;
		if ( wm.isWifiEnabled() == true ) {
			wifi_info = wm.getConnectionInfo();
			wm.disconnect();
			wifi_info = wm.getConnectionInfo();
		}
(6)  WifiConfiguration類別描述AP configuration，調用wifi管理器方法addNetwork(config)及removeNetwork(netID)增刪associated AP list
(7)  變更預設mobile或wifi網路連線型態，調用連線管理器cm.getNetworkPreference()及cm.setNetworkPreference(preference)取得或變更預設使用的網路連線型態
(8)  取得所有網路資訊
        NetworkInfo[] info = cm.getAllNetworkInfo();
        for (int i = 0; i < info.length; i++) {
        	//cm.stopUsingNetworkFeature(networkType, feature)
        	Log.d(Tag, info[i].getTypeName() + " " + info[i].getSubtypeName() + " " + info[i].isConnected() );
            if (info[i].getState() == NetworkInfo.State.CONNECTED) {
            }
        }
(9)  連線管理器取得mobile或wifi型態網路資訊，取得目前具有連線傳輸能力的網路
        NetworkInfo activeNetwork, wifi_network, mobile_network;
		wifi_network = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
		mobile_network = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
		activeNetwork = cm.getActiveNetworkInfo();
7.  下載更新功能全念完善化，處理任何時刻斷線例外
8.  I_Tracker_Well_Plate_View類別配合先前實作I_Track_Utility_Activity類別，新增成員變量force_invalide，true表示強制重繪區域，false則只繪製有變化之區域

=============================================================================================
20140930
1.  log檔輸出索引0~23修正成1~24
2.  Connect_I_Tracker()新增變量決定是否讀取Led-Sensor failure狀態，消除因切換pipetting模式與敏感度設定造成hang住情形
3.  menu item高度和點數根據解析度和density正確計算

=============================================================================================
20141022
1.  檔案列表排序反向，LogFileChooserActivity及LogFileDisplayActivity加入Home As Up，點擊ActionBar上Home鍵返回上一層Activity，FileChooserActivity新增extra bundle key：INPUT_REVERSE_FILELIST_ORDER，FileChooserCore加入filelist arrays reverse
2.  移除Auto pipetting Mode
(1)  I_Tacker_Activity.Pipetting_Mode加1才會映射至正確索引
(2)  I_Tracker_Device.Pipetting_Mode初始值改成1
3.  My_StateListDrawable.addState()新增指定icon長寬，長寬須為8的倍數
4.  按選單"End"時會進行一次再確認
5.  20141024量產前最後demo

=============================================================================================
20141107
1.  更新iTrack桌面圖示
2.  undo時96孔盤會有最後一個座標消失不見，已經解決
3.  存放更新app及fw的伺服器更改為帳號software@maestrogen.com，放置於google drive
4.  作業系統電源管理策略與效能有關聯度，linux內核把系統硬件資訊以虛擬檔案呈現出來，sysfs、procfs分別實現在/sys/與/proc系統文件資訊，governor稱為電源管理策略
root# cat /proc/cpuinfo
root# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
root# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
root# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
=>conservative powersave ondemand interactive userspace performance
root# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
除了userspace可變更頻率外，其餘governor運行頻率由作業系統動態決定之，效能與耗電兩者不可兼得
5.  Activity.onCreate()時調用save_power_manager_governor()把系統預設的governor、cpu_freq記錄下來，當程式執行Start_Refresh_iTracker_Data_Thread()將效能調成iTrack_cpu_governor、iTrack_cpu_freq；當程式停止掃瞄時Stop_Refresh_iTracker_Data_Thread()
再將效能恢復預設值
set_system_governor_freq ( iTrack_cpu_governor, iTrack_cpu_freq );  //set iTrack governor & cpu freq
set_system_governor_freq ( orig_cpu_governor, orig_cpu_freq );  //restore system origin governor & cpu freq
6.  su或sh執行時會開啟一層子進程子shell，stdin、stdout用來傳送和接收命令及執行結果，java shell command執行方式大致如下；寫成函式exec_shell_command ( shell_command )，重新整理須要執行shell command程式片段，show_system_bar()、hide_system_bar()
修正錯誤以這個函數執行

java.lang.Runtime rt;
java.lang.Process p;
int exit_code;
String line = null, result = null;

***執行命令立即返迴，並取得執行結果***
rt = Runtime.getRuntime();  //create a runtime environment
p = rt.exec ( new String [] { "sh", "-c", "ls" } );  //spawn a child shell and exec the command "ls" then exit the shell and set the exit code
p.waitFor();  //thread block by object p
InputStreamReader is_reader = new InputStreamReader ( p.getInputStream() );
BufferedReader buf_is_reader = new BufferedReader ( is_reader );
exit_code = p.exitValue();
while ( ( line = buf_is_reader().readLine() ) != null ) {
  result += line;
}

***執行sh或su並準備好標準輸出輸入***
p = rt.exec ( new String [] { "su" } );  //spawn shell process ready to accept command from stdin and output to stdout
DataOutputStream os = new DataOutputStream(p.getOutputStream());  //build a stdin to the shell process
InputStreamReader is_reader = new InputStreamReader ( p.getInputStream() );
BufferedReader buf_is_reader = new BufferedReader ( is_reader );  //build a stdout to shell process
os.writeBytes ( "ls -al\n" );  //run command "ls -al"
os.writeByte ( "exit\n");  //exit the shell process and cause set exit code
p.waitFor (); //Don't exec the code before exit shell process
exit_code = p.exitValue();  //get exit code
while ( ( line = buf_is_reader().readLine() ) != null ) {
  result += line;
}

=============================================================================================
20141118~20141124
1.  修改res/layout/upper_well_layout_param.xml，調整i-track screen utility下半部widget元件避免被機構遮住按不到
2.  su-new全面改名成su
3.  menu collapse/expanding button、running status indicator、connection status indicator靠左對齊
4.  螢幕上方顯示孔盤Y軸座標標籤A~H(P)字樣向右偏移1mm
5.  "preference"設定完成時，確保i-track裝置有收到停止命令，如此新設定才能於重啟掃描時生效
6.  修改david du最新反饋
(1)  按"Run"時程式呼叫"preference"菜單選項供使用者選擇pipetting mode
mList.performItemClick(mList.getAdapter().getView(5, null, null), 5, mList.getAdapter().getItemId(5));
(2)  移除preference dialog致能調整敏感度checkbox
(3)  開啟"About"偵測網路連線逾時計數timeout = 45秒，時間到檢查internet能否連上，若45秒內完成連線或使用者關閉窗口，則停止連線逾時檢查，移除檢查方塊"force upgrade app and firmware”
(4)  若session已結束則不詢問是否結束執行並存檔而直接返回Home主頁，調用switch_to_well_plate_selection()
(5)  "Run"選單選項加大
(7)  增加檢查方塊auto save log，預設是勾選，使用者自行決定是否自動儲存檔案
(8)  LogFileChooserActivity.java類別大幅度新增功能，定義選單log_file_chooser_menu.xml，選擇單一檔案可操作"Open"、"Delete"、"Rename"，選擇多個檔案可操作"Delete"，檔案列出可案檔名字母或檔案最後更動時間來排序。須要搭配2014/11/23最新修改的afiledialog才可正常運作
7.  iTrack_app_property配置檔移至/data/目錄下
8.  Maestrogen小部件logo替換成正確的

=============================================================================================
20141208
1.  增加"Help content"imagebutton在最右側，按下後開啟說明書，說明書檔案放置於/mnt/sdcard/Download/，每台平板事先安裝adobe reader

=============================================================================================
20141210~20141223
1.  此版為首批300台出機之APP
2.  指示區加上"Refresh"扭可快速reblank
3.  About┬為話盒底部新增使用者說明書超連結，轉址網頁放置在盟基網頁，目地檔案放在google drive
4.  重新review下載更新頁面，更嚴格對話盒上的各種狀態
2.  應要求移除"Auto pipetting Mode"

=============================================================================================
20150119
1.  發行使用之數位簽章存放signature

=============================================================================================
20150814
1.  實現pipetting偵測座標預覽(初版)
2.  Preference Dialog加上wifi on/off供使用者選擇